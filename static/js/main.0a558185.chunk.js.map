{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","kittens","clickedKittenIds","score","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","kitten","key","href","target","rel","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0a558185.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\nconst Card = props => (\r\n  <div className=\"card img-container\">\r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\n//stateless component\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score\">Your Score: {props.total}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./components/Card\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Score from \"./components/Score\";\r\nimport kittens from \"./cards.json\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state kittens to the cards json array\r\n  state = {\r\n   kittens,\r\n    clickedKittenIds: [],\r\n    score: 0,\r\n    goal: 8,\r\n    status: \"\"\r\n  };\r\n\r\n  //shuffle the kitten cards in the browser when clicked\r\n  shuffleScoreCard = id => {\r\n    let clickedKittenIds = this.state.clickedKittenIds;\r\n\r\n    if(clickedKittenIds.includes(id)){\r\n      this.setState({ clickedKittenIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\r\n      return;\r\n    }else{\r\n      clickedKittenIds.push(id)\r\n\r\n      if(clickedKittenIds.length === 8){\r\n        this.setState({score: 8, status: \"You Won! Great Job, Smartie! Click to play again!\", clickedKittenIds: []});\r\n        console.log('You Win');\r\n        return;\r\n      }\r\n\r\n      this.setState({ kittens, clickedKittenIds, score: clickedKittenIds.length, status: \" \" });\r\n\r\n      for (let i = kittens.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n         [kittens[i], kittens[j]] =  [kittens[j], kittens[i]];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Map over this.state.cards and render a Card component for each card object\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">The Click</h1>\r\n          <p className=\"App-intro\">\r\n            Try not to click the same image twice!\r\n          </p>\r\n        </header>\r\n        <Score total={this.state.score}\r\n               goal={8}\r\n               status={this.state.status}\r\n               />\r\n        <Wrapper>\r\n          {this.state.kittens.map(kitten => (\r\n            <Card\r\n              shuffleScoreCard={this.shuffleScoreCard}\r\n              id={kitten.id}\r\n              key={kitten.id}\r\n              image={kitten.image}\r\n            />\r\n          ))}\r\n        </Wrapper>\r\n        <footer>\r\n          <p>Designed and built by Miranda Jaroneski. You can find the\r\n          code<a href=\"https://github.com/MJJaroneski/clickyGame\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>.</p>\r\n        </footer>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}